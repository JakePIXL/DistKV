name: Build and Release

on:
  push:
  pull_request:
    types: [merged]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        arch: [x64, arm64]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: x86_64-pc-windows-msvc

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: x86_64-apple-darwin

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: x86_64-unknown-linux-gnu

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: aarch64-pc-windows-msvc

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: aarch64-apple-darwin

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: aarch64-unknown-linux-gnu
        
    - name: Setup C Compiler
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.arch }}" == "x64" ]; then
          choco install visualstudio2019buildtools -y --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
        elif [ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.arch }}" == "arm64" ]; then
          choco install visualstudio2019buildtools -y --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.ARM64"
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y aarch64-linux-gnu-gcc
        elif [ "${{ matrix.os }}" == "macOS-latest" ]; then
          softwareupdate --list
          softwareupdate --install --all
        fi

    - name: Build with Cargo
      if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
      run: |
        cargo build --release --target=x86_64-pc-windows-msvc

    - name: Build with Cargo
      if: matrix.os == 'windows-latest' && matrix.arch == 'arm64'
      run: |
        cargo build --release --target=aarch64-pc-windows-msvc

    - name: Build with Cargo
      if: matrix.os == 'macOS-latest' && matrix.arch == 'x64'
      run: |
        cargo build --release --target=x86_64-apple-darwin

    - name: Build with Cargo
      if: matrix.os == 'macOS-latest' && matrix.arch == 'arm64'
      run: |
        cargo build --release --target=aarch64-apple-darwin

    - name: Build with Cargo
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
      run: |
        cargo build --release --target=x86_64-unknown-linux-gnu

    - name: Build with Cargo
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      run: |
        cargo build --release --target=aarch64-unknown-linux-gnu


    - name: Package artifacts
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp -f target/release/*.exe artifacts/
        elif [ "${{ matrix.os }}" = "macOS-latest" ]; then
          cp -f target/release/*.dmg artifacts/
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cp -f target/release/*.tar.gz artifacts/
        fi
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        files: artifacts/*
